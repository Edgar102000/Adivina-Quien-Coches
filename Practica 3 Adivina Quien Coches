# -*- coding: utf-8 -*-
"""
Created on Mon Oct 28 20:24:23 2024

@author: Edgar Ruíz
"""

import random
import json
import tkinter as tk
from tkinter import messagebox, simpledialog

# Cargar la lista de coches desde un archivo JSON si existe
def cargar_coches():
    try:
        with open("coches.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        # Lista inicial por defecto
        return [
            {"marca": "BMW", "modelo": "M2", "color": "verde", "plataforma": "Cupe", "tipo": "Deportivo"},
            {"marca": "BMW", "modelo": "X5", "color": "rojo", "plataforma": "SUV", "tipo": "Deportivo familiar"},
            {"marca": "BMW", "modelo": "X6", "color": "blanco", "plataforma": "SUV", "tipo": "Deportivo familiar"},
            {"marca": "Audi", "modelo": "A1", "color": "azul", "plataforma": "sedán", "tipo": "Deportivo"},
            {"marca": "Audi", "modelo": "Q5", "color": "gris", "plataforma": "SUV", "tipo": "Deportivo familiar"},
            {"marca": "Audi", "modelo": "TT", "color": "blanco", "plataforma": "Cupe", "tipo": "Deportivo"},
            {"marca": "Toyota", "modelo": "Corolla", "color": "negro", "plataforma": "sedán", "tipo": "Utilitario"},
            {"marca": "Toyota", "modelo": "Rav4", "color": "plata", "plataforma": "SUV", "tipo": "Familiar"},
            {"marca": "Toyota", "modelo": "Sienna", "color": "café", "plataforma": "SUV", "tipo": "Familiar"},
            {"marca": "Ford", "modelo": "Focus", "color": "blanco", "plataforma": "hatchback", "tipo": "Utilitario"},
            {"marca": "Ford", "modelo": "Mustang", "color": "negro", "plataforma": "Cupe", "tipo": "Deportivo"},
            {"marca": "Mercedes", "modelo": "GLC", "color": "gris", "plataforma": "SUV", "tipo": "Deportivo familiar"},
            {"marca": "Nissan", "modelo": "X-trail", "color": "rojo", "plataforma": "SUV", "tipo": "Familiar"},
            {"marca": "Honda", "modelo": "Civic", "color": "azul", "plataforma": "sedán", "tipo": "Utilitario"},
            {"marca": "Chevrolet", "modelo": "Camaro", "color": "amarillo", "plataforma": "Cupe", "tipo": "Deportivo"}
        ]

# Guardar la lista de coches en un archivo JSON
def guardar_coches(coches):
    with open("coches.json", "w") as file:
        json.dump(coches, file)

# Actualizar la memoria de aprendizaje
def actualizar_memoria(atributo, valor, respuesta):
    clave = f"{atributo}-{valor}"
    if clave not in memoria_aprendizaje:
        memoria_aprendizaje[clave] = {"sí": 0, "no": 0}
    memoria_aprendizaje[clave][respuesta] += 1

# Elegir la pregunta óptima
def elegir_pregunta_optima(coches_disponibles, preguntas_hechas):
    mejores_preguntas = []
    for coche in coches_disponibles:
        for atributo, valor in coche.items():
            clave = f"{atributo}-{valor}"
            if clave in memoria_aprendizaje and clave not in preguntas_hechas:
                frecuencia_si = memoria_aprendizaje[clave]["sí"]
                frecuencia_no = memoria_aprendizaje[clave]["no"]
                diferencia = abs(frecuencia_si - frecuencia_no)
                mejores_preguntas.append((diferencia, atributo, valor))
    
    mejores_preguntas.sort(reverse=True, key=lambda x: x[0])
    
    if mejores_preguntas:
        return mejores_preguntas[0][1], mejores_preguntas[0][2]
    
    preguntas_disponibles = []
    for coche in coches_disponibles:
        for atributo, valor in coche.items():
            if f"{atributo}-{valor}" not in preguntas_hechas:
                preguntas_disponibles.append((atributo, valor))
    
    if preguntas_disponibles:
        return random.choice(preguntas_disponibles)
    
    return None, None

# Preguntar al usuario en la interfaz gráfica
def preguntar_usuario(pregunta):
    respuesta = messagebox.askyesno("Pregunta", pregunta)
    return "sí" if respuesta else "no"

# Filtrar coches en base a las respuestas
def filtrar_coches(coches, atributo, valor, respuesta):
    if respuesta == "sí":
        return [coche for coche in coches if coche[atributo] == valor]
    else:
        return [coche for coche in coches if coche[atributo] != valor]

# Guardar la memoria de aprendizaje en un archivo JSON
def guardar_memoria():
    with open("memoria_aprendizaje.json", "w") as file:
        json.dump(memoria_aprendizaje, file)

# Cargar la memoria de aprendizaje desde un archivo JSON
def cargar_memoria():
    global memoria_aprendizaje
    try:
        with open("memoria_aprendizaje.json", "r") as file:
            memoria_aprendizaje = json.load(file)
    except FileNotFoundError:
        memoria_aprendizaje = {}

# Agregar un nuevo coche cuando el programa falla en adivinar
def agregar_nuevo_coche(coches):
    nueva_marca = simpledialog.askstring("Nuevo Coche", "¿Cuál es la marca del coche?")
    nuevo_modelo = simpledialog.askstring("Nuevo Coche", "¿Cuál es el modelo del coche?")
    nuevo_color = simpledialog.askstring("Nuevo Coche", "¿Cuál es el color del coche?")
    nueva_plataforma = simpledialog.askstring("Nuevo Coche", "¿Cuál es la plataforma del coche (e.g. SUV, sedán)?")
    nuevo_tipo = simpledialog.askstring("Nuevo Coche", "¿Cuál es el tipo del coche (e.g. Deportivo, Familiar)?")
    
    nuevo_coche = {
        "marca": nueva_marca,
        "modelo": nuevo_modelo,
        "color": nuevo_color,
        "plataforma": nueva_plataforma,
        "tipo": nuevo_tipo
    }

    if any(nuevo_coche.items() == coche.items() for coche in coches):
        messagebox.showinfo("Info", "Este coche ya está registrado en el sistema.")
    else:
        coches.append(nuevo_coche)
        guardar_coches(coches)
        messagebox.showinfo("Gracias", "¡He aprendido algo nuevo!")

# Bucle principal del juego con interfaz gráfica
def jugar():
    coches = cargar_coches()
    cargar_memoria()
    coches_disponibles = coches.copy()
    preguntas_hechas = set()
    adivinanza_exitosa = False

    while len(coches_disponibles) > 1:
        atributo, valor = elegir_pregunta_optima(coches_disponibles, preguntas_hechas)
        
        if atributo is None:
            break
        
        respuesta = preguntar_usuario(f"¿El coche es {atributo} {valor}?")
        actualizar_memoria(atributo, valor, respuesta)
        preguntas_hechas.add(f"{atributo}-{valor}")
        coches_disponibles = filtrar_coches(coches_disponibles, atributo, valor, respuesta)

    if len(coches_disponibles) == 1:
        coche_adivinado = coches_disponibles[0]
        messagebox.showinfo("¡Adiviné!", f"El coche que estás pensando es un {coche_adivinado['marca']} {coche_adivinado['modelo']}.")
    else:
        agregar_nuevo_coche(coches)

    guardar_memoria()
    jugar_nuevamente = messagebox.askyesno("Juego", "¿Quieres jugar de nuevo?")
    if jugar_nuevamente:
        jugar()
    else:
        messagebox.showinfo("Juego", "Gracias por jugar. ¡Hasta luego!")

# Configuración de la ventana principal
def iniciar_juego():
    ventana = tk.Tk()
    ventana.title("Adivina el Coche")
    ventana.geometry("400x200")
    
    btn_jugar = tk.Button(ventana, text="Iniciar Juego", command=jugar, font=("Arial", 12))
    btn_jugar.pack(pady=20)
    
    ventana.mainloop()

# Ejecutar la interfaz
if __name__ == "__main__":
    iniciar_juego()
